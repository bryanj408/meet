{"map":"{\"version\":3,\"sources\":[\"/Users/Bryan/Documents/meet/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/Users/Bryan/Documents/meet/src/logo.svg\",\"/Users/Bryan/Documents/meet/src/App.js\",\"/Users/Bryan/Documents/meet/src/serviceWorkerRegistration.js\",\"/Users/Bryan/Documents/meet/src/reportWebVitals.js\",\"/Users/Bryan/Documents/meet/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"App\",\"react_default\",\"a\",\"createElement\",\"className\",\"src\",\"logo\",\"alt\",\"href\",\"target\",\"rel\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"reportWebVitals\",\"onPerfEntry\",\"Function\",\"e\",\"then\",\"bind\",\"_ref\",\"getCLS\",\"getFID\",\"getFCP\",\"getLCP\",\"getTTFB\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\",\"src_App\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\",\"catch\",\"error\",\"console\",\"message\"],\"mappings\":\"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qNCyBzBC,IAAAA,EArBf,WACE,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAKC,EAAAA,EAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,IAAA,KAAA,iBAGAF,EAAAC,EAAAC,cAAA,IAAA,CACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCpB,EAAAqB,EAAA,GAAAC,KAAAtB,EAAAuB,KAAA,KAAA,KAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCADW,EAAAA,EAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/B,EAAAC,EAAAC,cAACF,EAAAC,EAAM+B,WAAP,KACEhC,EAAAC,EAAAC,cAAC+B,EAAD,QFqHE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,KAAK,SAACkB,GACLA,EAAaC,eAEdC,MAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,WE/G5B3B\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\",\"import React from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <header className=\\\"App-header\\\">\\n        <img src={logo} className=\\\"App-logo\\\" alt=\\\"logo\\\" />\\n        <p>\\n          HELLO, WORLD!\\n        </p>\\n        <a\\n          className=\\\"App-link\\\"\\n          href=\\\"https://reactjs.org\\\"\\n          target=\\\"_blank\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n        >\\n          Learn React\\n        </a>\\n      </header>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://cra.link/PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.0/8 are considered localhost for IPv4.\\n    window.location.hostname.match(/^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://cra.link/PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then((registration) => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://cra.link/PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch((error) => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl, {\\n    headers: { 'Service-Worker': 'script' },\\n  })\\n    .then((response) => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then((registration) => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log('No internet connection found. App is running in offline mode.');\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready\\n      .then((registration) => {\\n        registration.unregister();\\n      })\\n      .catch((error) => {\\n        console.error(error.message);\\n      });\\n  }\\n}\\n\",\"const reportWebVitals = (onPerfEntry) => {\\n  if (onPerfEntry && onPerfEntry instanceof Function) {\\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\\n      getCLS(onPerfEntry);\\n      getFID(onPerfEntry);\\n      getFCP(onPerfEntry);\\n      getLCP(onPerfEntry);\\n      getTTFB(onPerfEntry);\\n    });\\n  }\\n};\\n\\nexport default reportWebVitals;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\\nimport reportWebVitals from './reportWebVitals';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://cra.link/PWA\\nserviceWorkerRegistration.unregister();\\n\\n// If you want to start measuring performance in your app, pass a function\\n// to log results (for example: reportWebVitals(console.log))\\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\\nreportWebVitals();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,function(e,n,t){e.exports=t.p+\"static/media/logo.5d5d9eef.svg\"},function(e,n,t){e.exports=t(15)},,,,,,,,,function(e,n,t){},function(e,n,t){},function(e,n,t){\"use strict\";t.r(n);var a=t(0),o=t.n(a),r=t(2),c=t.n(r),i=(t(13),t(3)),l=t.n(i);t(14);var s=function(){return o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(\"header\",{className:\"App-header\"},o.a.createElement(\"img\",{src:l.a,className:\"App-logo\",alt:\"logo\"}),o.a.createElement(\"p\",null,\"HELLO, WORLD!\"),o.a.createElement(\"a\",{className:\"App-link\",href:\"https://reactjs.org\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Learn React\")))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var m=function(e){e&&e instanceof Function&&t.e(3).then(t.bind(null,16)).then(function(n){var t=n.getCLS,a=n.getFID,o=n.getFCP,r=n.getLCP,c=n.getTTFB;t(e),a(e),o(e),r(e),c(e)})};c.a.createRoot(document.getElementById(\"root\")).render(o.a.createElement(o.a.StrictMode,null,o.a.createElement(s,null))),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()}).catch(function(e){console.error(e.message)}),m()}],[[4,1,2]]]);","extractedComments":[]}