{"map":"{\"version\":3,\"sources\":[\"/Users/Bryan/Documents/meet/src/serviceWorkerRegistration.js\",\"/Users/Bryan/Documents/meet/src/reportWebVitals.js\",\"/Users/Bryan/Documents/meet/src/index.js\"],\"names\":[\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"reportWebVitals\",\"onPerfEntry\",\"Function\",\"__webpack_require__\",\"e\",\"then\",\"bind\",\"_ref\",\"getCLS\",\"getFID\",\"getFCP\",\"getLCP\",\"getTTFB\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"react_default\",\"a\",\"createElement\",\"StrictMode\",\"App_default\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\",\"catch\",\"error\",\"console\",\"message\"],\"mappings\":\"iLAaoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,KAAA,KAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,EAAAA,EAASC,WAAWC,SAASC,eAAe,SACpDC,OACHC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,WAAP,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,QFsHE,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBpB,KAAK,SAACqB,GACLA,EAAaC,eAEdC,MAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,WEhH5B/B\",\"sourcesContent\":[\"/* istanbul ignore file */\\n// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://cra.link/PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.0/8 are considered localhost for IPv4.\\n    window.location.hostname.match(/^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://cra.link/PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then((registration) => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://cra.link/PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch((error) => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl, {\\n    headers: { 'Service-Worker': 'script' },\\n  })\\n    .then((response) => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then((registration) => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log('No internet connection found. App is running in offline mode.');\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready\\n      .then((registration) => {\\n        registration.unregister();\\n      })\\n      .catch((error) => {\\n        console.error(error.message);\\n      });\\n  }\\n}\\n\",\"/* istanbul ignore file */\\nconst reportWebVitals = (onPerfEntry) => {\\n  if (onPerfEntry && onPerfEntry instanceof Function) {\\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\\n      getCLS(onPerfEntry);\\n      getFID(onPerfEntry);\\n      getFCP(onPerfEntry);\\n      getLCP(onPerfEntry);\\n      getTTFB(onPerfEntry);\\n    });\\n  }\\n};\\n\\nexport default reportWebVitals;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\\nimport reportWebVitals from './reportWebVitals';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://cra.link/PWA\\nserviceWorkerRegistration.unregister();\\n\\n// If you want to start measuring performance in your app, pass a function\\n// to log results (for example: reportWebVitals(console.log))\\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\\nreportWebVitals();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(e,n,s){},15:function(e,n,s){\"use strict\";s.r(n);var r=s(0),a=s.n(r),o=s(2),t=s.n(o),m=(s(13),s(3)),i=s.n(m);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var l=function(e){e&&e instanceof Function&&s.e(1).then(s.bind(null,16)).then(function(n){var s=n.getCLS,r=n.getFID,a=n.getFCP,o=n.getLCP,t=n.getTTFB;s(e),r(e),a(e),o(e),t(e)})};t.a.createRoot(document.getElementById(\"root\")).render(a.a.createElement(a.a.StrictMode,null,a.a.createElement(i.a,null))),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()}).catch(function(e){console.error(e.message)}),l()},3:function(e,n){throw new Error(\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\nSyntaxError: /Users/Bryan/Documents/meet/src/App.js: Unexpected keyword 'class'. (16:0)\\n\\n\\x1b[0m \\x1b[90m 14 |\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 15 |\\x1b[39m\\x1b[0m\\n\\x1b[0m\\x1b[31m\\x1b[1m>\\x1b[22m\\x1b[39m\\x1b[90m 16 |\\x1b[39m \\x1b[36mclass\\x1b[39m \\x1b[33mApp\\x1b[39m \\x1b[36mextends\\x1b[39m \\x1b[33mComponent\\x1b[39m {\\x1b[0m\\n\\x1b[0m \\x1b[90m    |\\x1b[39m \\x1b[31m\\x1b[1m^\\x1b[22m\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 17 |\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 18 |\\x1b[39m     state \\x1b[33m=\\x1b[39m {\\x1b[0m\\n\\x1b[0m \\x1b[90m 19 |\\x1b[39m         events\\x1b[33m:\\x1b[39m []\\x1b[33m,\\x1b[39m\\x1b[0m\\n    at instantiate (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:72:32)\\n    at constructor (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:366:12)\\n    at FlowParserMixin.raise (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:3453:19)\\n    at FlowParserMixin.checkReservedWord (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:14280:12)\\n    at FlowParserMixin.parseImportSpecifier (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:6668:12)\\n    at FlowParserMixin.parseNamedImportSpecifiers (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:16633:36)\\n    at FlowParserMixin.parseImport (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:16443:39)\\n    at FlowParserMixin.parseStatementContent (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:14887:27)\\n    at FlowParserMixin.parseStatement (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:14777:17)\\n    at FlowParserMixin.parseStatement (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:5951:24)\\n    at FlowParserMixin.parseBlockOrModuleBlockBody (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:15420:25)\\n    at FlowParserMixin.parseBlockBody (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:15411:10)\\n    at FlowParserMixin.parseProgram (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:14695:10)\\n    at FlowParserMixin.parseTopLevel (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:14682:25)\\n    at FlowParserMixin.parseTopLevel (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:6961:28)\\n    at FlowParserMixin.parse (/Users/Bryan/Documents/meet/node_modules/@babel/parser/lib/index.js:16689:10)\")},4:function(e,n,s){e.exports=s(15)}},[[4,3,2]]]);","extractedComments":[]}